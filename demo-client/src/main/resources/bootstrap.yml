server:
  port: 8001

logging:
  level:
    com.sakura.order.feign: debug # 这里我们可以单独配置feign的日志级别

feign:
  client:
    config:
      product-service:
        logger-level: basic
        connect-timeout: 5000 # 连接超时时间，默认2s
        read-timeout: 6000 #请求处理超时时间，默认5s
        #配置为生效
        request-interceptors:
          - org.tinycode.interceptor.fegin.DServerFeignInterceptor
#          - com.sakura.order.interceptor.feign.CustomFeignInterceptor # 开启自定义拦截器

spring:
  # 配置中心地址
  application:
    # 服务名称
    name: demo-client
  cloud:
    # loadbalancer只是为了后面的测试，因为nacos2.2.0关闭了这个，低版本的也不需要这个
    loadbalancer:
      nacos:
        enabled: true
    nacos:
      discovery:
        # 开启nacos作为服务注册中心，默认值：true
        enabled: true
        # nacos集群服务注册地址
        server-addr: 127.0.0.1:8848
        # nacos注册地址命名空间
        # 命名空间，默认 public,可设置dev,pro等，相同特征的服务分类，先去nacos命名空间创建
        # namespace: public
        namespace: public
        # nacos用户名
        username: nacos
        # nacos密码
        password: nacos
        # 分组，默认 DEFAULT_GROUP 相同特征的服务划分的更细
        group: DEFAULT_GROUP
        # 临时实例，默认true，false永久实例，即使宕机也不会从nacos服务中删除,可应对雪崩保护，避免服务被删除
        ephemeral: true
        # 权重 1-100 数值越大权重越大分配的流量就越大，通常结合权重负载均衡策略
        weight: 100
      config:
        server-addr: ${spring.cloud.nacos.discovery.server-addr}
        username: ${spring.cloud.nacos.discovery.username}
        password: ${spring.cloud.nacos.discovery.password}
        #dataid为yaml的文件扩展名配置方式 ${spring.application.name}.${file‐extension:properties}

        # ${spring.application.name}-${spring.profile.active}.${spring.cloud.nacos.config.file-extension}
        # 如果nacos上的配置文件后缀不是.properties，那么这里一定要指定文件后缀类型，否则读取不到文件
        file-extension: yaml
        namespace: 71bcd11c-c6c9-4349-8577-15f2c4112beb
        group: DEFAULT_GROUP
        context-path: /nacos
        # 共享配置
        shared-configs:
          - data-id: tiny.yaml
            group: DEFAULT_GROUP

